import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

class backend {
    final static String LOG_CREATE_TRANSACTIONCODE = "01";
    final static String LOG_DELETE_TRANSACTIONCODE = "02";
    final static String LOG_ADD_CREDIT_TRANSACTIONCODE = "06";
    final static String LOG_END_OF_SESSION_TRANSACTIONCODE = "00";
    final static String LOG_REFUND_TRANSACTIONCODE = "05";
    final static String LOG_SELL_TRANSACTIONCODE = "03";
    final static String LOG_BUY_TRANSACTIONCODE = "04";
    //prep these to be used later if arguments are called correctly
    static String mergedDTFilename = null; 
    static String oldAccountsFilename = null;
    static String oldTicketsFilename = null;

    public static void main(String[] args) {
        //Checks if 3 arguments are present, if not print usage info
        if(args.length < 3){
            System.out.println("ERROR: no arguments specified\n");
            System.out.println("==backend==");
            System.out.println("Takes in files generated by the front ends, checks for consistencies/errors and outputs a valid accounts.txt and tickets.txt for use the next day. Generates a log of errors encountered"); 
            System.out.println("Usage: backend <merged_DT> <accounts file> <tickets file>\n");
            System.out.println("<merged_DT> is the Merged Daily Transaction File in text format");
            System.out.println("<accounts file> is the old accounts.txt");
            System.out.println("<tickets file> is the old tickets.txt");
            System.exit(0);
        }
        else{
            //sets the values above to valid entries based on user args
            mergedDTFilename = args[0];
            oldAccountsFilename = args[1];
            oldTicketsFilename = args[2];
        }

    //Read the merged daily transaction file line by line
    try (BufferedReader br = new BufferedReader(new FileReader(mergedDTFilename))) {
        String line;
        while ((line = br.readLine()) != null) {
            //switch on the transaction type before doing the changes
            String type = line.substring(0, 2);
            switch (type) {
                case LOG_CREATE_TRANSACTIONCODE:
                    System.out.println("LOG_Create");
                    break;
                case LOG_DELETE_TRANSACTIONCODE:
                    System.out.println("LOG_DELETE");
                    break;
                case LOG_ADD_CREDIT_TRANSACTIONCODE:
                    System.out.println("LOG_ADD_CREDIT");
                    break;
                case LOG_END_OF_SESSION_TRANSACTIONCODE:
                    System.out.println("LOG_END_OF_SESSION");
                    break;
                case LOG_REFUND_TRANSACTIONCODE:
                    System.out.println("LOG_REFUND");
                    break;
                case LOG_SELL_TRANSACTIONCODE:
                    System.out.println("LOG_SELL");
                    break;
                case LOG_BUY_TRANSACTIONCODE:
                    System.out.println("LOG_BUY");
                    break;
                default:
                    System.out.println("TransactionType not found");

            }
        }
    }catch(Exception e){
        e.printStackTrace(System.out);
    }



    }
}
